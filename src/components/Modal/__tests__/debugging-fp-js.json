{
  "html": "\n<p>\n  After exploring functional style programming in Javascript I'd like to write\n  about some trade offs worth thinking about when debugging. This post is rather\n  opinionated but offers some techniques to make thing's easier.\n</p>\n<p>\n  I will assume some familiarity with basic functional programming concepts.\n  Some of the issues I bring up are not specific to functional pattens per-se.\n</p>\n<p>\n  If you write 100% typo freee, perfect code all the time, you may find this\n  a little dry. Or if you think it would be ok for Apple to remove the backspace\n  key like they did with the escape key, you should probably move on :/\n</p>\n<p>\n  The purpose of this is not to discourage anyone from writing in a more\n  functional style. Nor is it to discourage the use of one of the great quality\n  functional libraries out there like <a href=\"http://ramdajs.com/\">Ramda</a>, <a href=\"https://github.com/lodash/lodash/wiki/FP-Guide\">lodash_fp</a> or\n  <a href=\"https://sanctuary.js.org/\">Sanctuary</a>. I enjoy writing code in a more functional style and\n  understand many good reasons to use and promote it.\n</p>\n<p><em>Enough with the disclaimers</em>.</p>\n<p>\n  I have found that in certain contexts, particularly with using a\n  <a href=\"https://en.wikipedia.org/wiki/Tacit_programming\">tacit / point-free</a> programming style in Javascript,\n  it can lead to obfuscation of stack traces and barriers to debugging.\n</p>\n<p>\n  Lets start by looking at a stack trace from an unexpected error in some\n  functional style code. It's probably just some silly typo, in this case it's\n  from some something rather \"simple\" using the <a href=\"http://ramdajs.com/\">Ramda</a> library:\n</p>\n<p><img src=\"/assets/fp-debugging/example-fp-ramda-exception.png\" alt=\"Functional exception example\"></p>\n<p>\n  When seeing this kind of thing, I can't help but be reminded of the\n  frustration I have seen and experienced myself while writing and debugging\n  <code>Angularjs 1.x</code> console errors.\n</p>\n<p>In this situation it can be pretty tempting to naively think:</p>\n<blockquote>\n  <p>\n    \"If an Error's Call Stack only shows lines from a dependency,\n    the error therefore must be a bug in the dependency!\"\n  </p>\n  <ul>\n    <li>A thought no programmer ever had &#x3C;-- Sarcasm</li>\n  </ul>\n</blockquote>\n<p>\n  How many issues on github and so on have you seen closed from someone commenting\n  something like:\n</p>\n<blockquote>\n  <p>\"Woops sorry my fault, I didn't see the...\"</p>\n</blockquote>\n<p>\n  Wishful thinking aside, you need to solve this error whether it is your\n  code or not. From the message it's probably hard to tell where in your code\n  something named as generically as \"name\" is being referenced. For all you\n  know, it could be some smarts that is using the name property on\n  the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\">function prototype</a>.\n</p>\n<p>\n  What we can see in the call stack are function names from very\n  common functional patterns like <code>pipe</code>, <code>curry</code> and <code>map</code>. Problem is,\n  you are probably using these all over your codebase. So this is about as\n  good as knowing that a code path is using <code>if</code> and <code>else</code> statements.\n  Useless, if this came from production, good luck in knowing where to\n  effectively start debugging the issue.\n</p>\n<p>\n  So why would a more functional style of programming lead to an obfuscated\n  stack trace like this?\n</p>\n<p>It is a combination of:</p>\n<ul>\n  <li><a href=\"https://en.wikipedia.org/wiki/Currying\">Function currying</a></li>\n  <li><a href=\"https://en.wikipedia.org/wiki/Tacit_programming\">Tacit / Point-free</a> styles</li>\n  <li>The dynamic nature of Javascript</li>\n  <li>Async methods</li>\n  <li>Large amounts of library code</li>\n</ul>\n<p>\n  All of this has the side effect of filling the call stack with function names\n  that are usually anonymous or from a dependency if they are not totally mangled\n  from some magnification. Now the browser's call stack size is after all\n  limited. I'll show you how to increase it a little further on.\n</p>\n<h3><a href=\"#comparing-imperative-and-functional-examples\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Comparing imperative and functional examples</h3>\n<p>\n  This is all easier to think about with a simple code example. Code from less\n  trivial and larger codebases will most likely, have longer stack traces and\n  if you just walked in, it could be even harder to reason about.\n</p>\n<p>In this example, imagine we are given the following object from a service.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> response = {\n  <span class=\"hljs-attr\">messages</span>: [\n    {\n      <span class=\"hljs-attr\">user</span>: {\n        <span class=\"hljs-attr\">role</span>: <span class=\"hljs-string\">'The first ones'</span>,\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Kosh'</span>,\n        <span class=\"hljs-attr\">species</span>: <span class=\"hljs-string\">'Vorlon'</span>\n      },\n      <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">'Who are you?'</span>\n    }\n  ]\n}\n</code></pre>\n<p>\n  We are required to display some comma separated text in a view. The text must\n  contain a list of all the user names and their species. Each user needs to be\n  in the following format:\n</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">`<span class=\"hljs-subst\">${userName}</span> is a <span class=\"hljs-subst\">${species}</span>`</span>\n\n<span class=\"hljs-comment\">// Eg =>  Kosh is a Vorlon, ...</span>\n</code></pre>\n<p>To illustrate, let's implement this using a couple of different styles.</p>\n<h4><a href=\"#functional-point-free\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Functional point-free</h4>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> userDisplayText = R.pipe(\n  R.prop([<span class=\"hljs-string\">'user'</span>]),\n  R.props([<span class=\"hljs-string\">'name'</span>, <span class=\"hljs-string\">'species'</span>]),\n  R.intersperse(<span class=\"hljs-string\">'is a'</span>),\n  R.join(<span class=\"hljs-string\">' '</span>)\n)\n\n<span class=\"hljs-keyword\">const</span> messagesDisplayText = R.pipe(\n  R.prop(<span class=\"hljs-string\">'messages'</span>),\n  R.map(userDisplayText),\n  R.join(<span class=\"hljs-string\">', '</span>)\n)\n</code></pre>\n<h4><a href=\"#imperative\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Imperative</h4>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">messagesDisplayText</span>(<span class=\"hljs-params\">response</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> users = []\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; response.messages.length; i++) {\n    <span class=\"hljs-keyword\">var</span> user = response.messages[i].user\n    <span class=\"hljs-keyword\">var</span> details = [\n      user.name,\n      <span class=\"hljs-string\">'is a'</span>,\n      user.species\n    ]\n    users.push(details.join(<span class=\"hljs-string\">' '</span>))\n  }\n  <span class=\"hljs-keyword\">return</span> users.join(<span class=\"hljs-string\">', '</span>);\n}\n</code></pre>\n<p>\n  Yes these are strange and imperfect ways to implement this, it's only\n  intended to describe the differences. However they both output the same\n  required string. Now <em>for</em> because errors happen, apparently a valid value\n  for the user in the response is also null:\n</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> response = {\n  <span class=\"hljs-attr\">messages</span>: [\n    {\n      <span class=\"hljs-attr\">user</span>: {\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Kosh'</span>,\n        <span class=\"hljs-attr\">species</span>: <span class=\"hljs-string\">'Vorlon'</span>\n      },\n      <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">'Who are you?'</span>\n    },\n    {\n      <span class=\"hljs-attr\">user</span>: <span class=\"hljs-literal\">null</span>,\n      <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">'What do you want?'</span>,\n    },\n  ]\n}\n</code></pre>\n<p>How were we to know? :(</p>\n<p>\n  If you guessed it, yes this is the cause of the error you first saw\n  at the start of the post.\n</p>\n<p>\n  Lets see this while using \"Pause on Exception\" in Chromium and compare the\n  styles side by side:\n</p>\n<p>Functional:</p>\n<p><img src=\"/assets/fp-debugging/example-fp-ramda-exception.png\" alt=\"Functional exception example\"></p>\n<p>Imperative:</p>\n<p><img src=\"/assets/fp-debugging/example-imperative-exception.png\" alt=\"Imperative exception example\"></p>\n<p>\n  In this particular scenario, it's almost like black and white. The imperative\n  call stack shows you the exact function name and line number you need to\n  understand the issue.\n</p>\n<h3><a href=\"#why-continue-with-a-functional-style\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Why continue with a functional style?</h3>\n<p>\n  It is ironic that one reason people become interested in functional programming,\n  is that the code can be easier to reason about. In this case something that\n  was ok to read in an imperative style, now produces errors that seem way\n  more complicated in a functional one.\n</p>\n<p>\n  Outside of this example, the cause of the issue may not be from something as\n  simple, or as unlikely, as a server response returning an unexpected payload\n  signature. Knowing why the value was <code>null</code> can be far less trivial.\n</p>\n<p>\n  From what I know so far, I'll try to describe a functional programmer's worst\n  nightmare. Consider the error happens inside a class with deep inheritance,\n  on property with imperative style code. This code is mutating a complex\n  local state, that can also be influenced by undocumented, hard to infer and\n  predict, side-effects. In this scenario, it is often difficult to follow and\n  reproduce object states. Especially states that you first see only after\n  development in qa or production. Even worse are states that only seem to be\n  happening on every other machine but your own.\n</p>\n<p>\n  The <code>Functional vs Imperative</code> discussion is out of the scope of this post.\n  So put away your fighting gloves, it has probably all been said before ;)\n</p>\n<p>\n  Anyway, hope is not lost in understanding Errors like this, lets work through\n  some techniques for debugging.\n</p>\n<h3><a href=\"#devtools-black-boxing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Devtools Black boxing</h3>\n<p>\n  Just like any other Javascript project with a lot of dependencies, we can use\n  the <a href=\"https://developer.chrome.com/devtools/docs/blackboxing\">black boxing</a> feature that most mainstream browser's\n  devtools provide. Effectively we can filter out from view stack lines from the\n  dependencies we are not currently concerned with.\n</p>\n<p>\n  So using the example above, here is the \"Pause on Uncaught Exceptions\" of the\n  functional example with all the Ramda lines blackboxed:\n</p>\n<p><img src=\"/assets/fp-debugging/example-blacklist-ramda-exception.png\" alt=\"Black boxing Ramda\"></p>\n<p>\n  Yay in this case, after hiding 20 frames of Ramda, you can now see where I\n  wrote code on <code>main.tsx:24</code>. This is exactly where I invoked the point-free method that leads to the exception.\n</p>\n<p>\n  It's useful to know that these filters can be stay persistent on reload and\n  also support a Regex if you need to filter out something more specific.\n  Blackboxing also has <a href=\"https://developer.chrome.com/devtools/docs/blackboxing#what-happens\">these effects</a> to be aware of:\n</p>\n<blockquote>\n  <ul>\n    <li>Exceptions thrown from library code will not pause (if Pause on exceptions is enabled),</li>\n    <li>Stepping into/out/over bypasses the library code,</li>\n    <li>Event listener breakpoints don't break in library code,</li>\n    <li>The debugger will not pause on any breakpoints set in library code.</li>\n  </ul>\n</blockquote>\n<h3><a href=\"#stack-trace-limit\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Stack trace limit</h3>\n<p>\n  If you are writing a lot of functional style code, it's common for the stack\n  trace to be quite large. For obvious performance reasons, browsers set limits.\n  So if you are in real pinch, some browsers like Chromium allow you to\n  increase the stack trace limit through this global api:\n</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">Error</span>.stackTraceLimit = number\n</code></pre>\n<p>Be mindful that this api is not something designed for you to use in production.</p>\n<h3><a href=\"#wrapping-named-functions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Wrapping named functions</h3>\n<p>\n  The advantage of knowing a function name in the stack trace of an\n  Unexpected Error provides obvious benefits. Best case is that if you are\n  familiar with the function names, you might immediately guess what is happening\n  given a particular error message.\n</p>\n<p>\n  Stacktraces themselves can also be useful if you are using some advanced error\n  logging tools. Perhaps you may want to group or search for particular errors\n  by a particular function name. This may show other insights like correlations\n  in the time it occurred.\n</p>\n<p>\n  You can add a named function to the stack trace of a point-free styled\n  function just by wrapping it in one:\n</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">namedMessagesDisplayText</span>(<span class=\"hljs-params\">response</span>) </span>{\n  <span class=\"hljs-comment\">// the point-free style function</span>\n  <span class=\"hljs-keyword\">return</span> messagesDisplayText(response)\n}\n</code></pre>\n<p>\n  Now inspecting the call stack, you should see the function name\n  <code>namedMessagesDisplayText</code>:\n</p>\n<p><img src=\"/assets/fp-debugging/example-named-function-exception.png\" alt=\"Black boxing Ramda\"></p>\n<p>\n  With this in mind, you could avoid the redundant function by holding back on\n  the purely <code>point-free</code> style and write this instead:\n</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">messagesDisplayText</span> (<span class=\"hljs-params\">response</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> R.pipe(\n    R.prop(<span class=\"hljs-string\">'messages'</span>),\n    R.map(userDisplayText),\n    R.join(<span class=\"hljs-string\">', '</span>)\n  )(response)\n}\n</code></pre>\n<h3><a href=\"#logging-helpers\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Logging helpers</h3>\n<p>\n  It won't help you improve a stack trace, but it can be an invaluable tool\n  in understanding an error or following data in a functional style control flow.\n</p>\n<p>\n  The gist is to simply create logging functions that you can insert into\n  your compositions:\n</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> traceUser = <span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =></span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'the user'</span>, data)\n  <span class=\"hljs-keyword\">return</span> data\n}\n\n<span class=\"hljs-keyword\">const</span> userLabelText = R.pipe(\n  R.prop([<span class=\"hljs-string\">'user'</span>]),\n  traceUser, <span class=\"hljs-comment\">// &#x3C;-- just another part of the pipe :)</span>\n  R.props([<span class=\"hljs-string\">'name'</span>, <span class=\"hljs-string\">'species'</span>]),\n  R.intersperse(<span class=\"hljs-string\">'is a'</span>),\n  R.join(<span class=\"hljs-string\">' '</span>)\n)\n</code></pre>\n<p>Now in your console or logging utils you can see what's happening:</p>\n<pre><code class=\"hljs language-crmsh\">// the <span class=\"hljs-keyword\">user</span> <span class=\"hljs-title\">{role</span>: <span class=\"hljs-string\">\"The first ones\"</span>, name: <span class=\"hljs-string\">\"Kosh\"</span>, species: <span class=\"hljs-string\">\"Vorlon\"</span>}\n// main.tsx:<span class=\"hljs-number\">26</span> the <span class=\"hljs-keyword\">user</span> <span class=\"hljs-title\">null</span>\n</code></pre>\n<h3><a href=\"#breakpoints\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Breakpoints</h3>\n<p>\n  If you want to use a break point in a functional composition, in this example\n  I think it is less straight forward compared to the imperative style code.\n</p>\n<p>\n  If you tried to put a break point on a line in a pipe or compose it just wont work. Or if you try to \"step into\" a functional pattern like a <a href=\"http://ramdajs.com/docs/#cond\">R.cond</a>\n  that essentially encapsulates a <code>if/else, if/else</code>, you will have to\n  step through library code increasing the call stack size. If it was just an\n  <code>if {} else ..</code> or perhaps a <code>switch</code> statement, the debugger is only going\n  to step through your code.\n</p>\n<p>\n  Thankfully Blackboxing in devtools as shown above, can help avoid this\n  by automatically telling the debugger to step over blackboxed lines.\n</p>\n<p>\n  To be more precise in a composition however, you can always make use of the\n  <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a> statement. So expanding on the logging\n  function idea, just add it to a helper function:\n</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> debug = <span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =></span> {\n  <span class=\"hljs-keyword\">debugger</span> <span class=\"hljs-comment\">// &#x3C;-- break here</span>\n  <span class=\"hljs-keyword\">return</span> item\n}\n\n<span class=\"hljs-keyword\">const</span> userLabelText = R.pipe(\n  R.prop([<span class=\"hljs-string\">'user'</span>]),\n  debug, <span class=\"hljs-comment\">// &#x3C;-- put this wherever in the pipe you need to</span>\n  R.props([<span class=\"hljs-string\">'name'</span>, <span class=\"hljs-string\">'species'</span>]),\n  R.intersperse(<span class=\"hljs-string\">'is a'</span>),\n  R.join(<span class=\"hljs-string\">' '</span>)\n)\n</code></pre>\n<p>\n  I find this particularly useful when learning the apis and thinking in\n  the functional style.\n</p>\n<p>\n  If you haven't used it before, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger\">debugger statement</a>\n  instructs the the devtools to break. This will only happen if you have a\n  devtools window open and connected. The great part about using it is that\n  there is no need to manually find the line and insert it the break point\n  manually. With something like hot reloading, often you just hit save on the\n  keyboard and wait for a devtools window take focus exactly where you wanted\n  it to be.\n</p>\n<p>\n  Since this is just like any other statement in your code, you can also wrap\n  it in any expression to have a conditional break point:\n</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> debug = <span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =></span> {\n  <span class=\"hljs-keyword\">if</span> (item === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">debugger</span>\n  <span class=\"hljs-keyword\">return</span> item\n}\n</code></pre>\n<h3><a href=\"#monkey-patching\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Monkey patching</h3>\n<p>\n  An interesting approach intended for development only, is to wrap a\n  higher order function to capture context like the function name and custom\n  stack trace by throwing and capturing an error. <code>@jacobp100</code> has a\n  <a href=\"https://medium.com/@jacobp100/debugging-functional-libraries-in-javascript-f586cdf8ea4\">cool example using Ramda pipe</a> worth checking out.\n  I imagine this idea could be useful in other creative ways.\n</p>\n<h3><a href=\"#runtime-type-system\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Runtime type system</h3>\n<p>\n  To provide some more useful error messages extra context from the runtime can\n  help. <a href=\"https://github.com/sanctuary-js/sanctuary#type-checking\">Sanctuary</a> allows messages and documentation\n  in place. They are similar to a <a href=\"https://github.com/power-assert-js/power-assert\">power assert like</a> error message:\n</p>\n<pre><code class=\"hljs language-awk\">S.add(<span class=\"hljs-number\">2</span>, true);\n<span class=\"hljs-regexp\">//</span> ! TypeError: Invalid value\n<span class=\"hljs-regexp\">//</span>\n<span class=\"hljs-regexp\">//</span>   add :: FiniteNumber -> FiniteNumber -> FiniteNumber\n<span class=\"hljs-regexp\">//</span>                          ^^^^^^^^^^^^\n<span class=\"hljs-regexp\">//</span>                               <span class=\"hljs-number\">1</span>\n<span class=\"hljs-regexp\">//</span>\n<span class=\"hljs-regexp\">//</span>   <span class=\"hljs-number\">1</span>)  true :: Boolean\n<span class=\"hljs-regexp\">//</span>\n<span class=\"hljs-regexp\">//</span>   The value at position <span class=\"hljs-number\">1</span> is not a member of ‘FiniteNumber’.\n<span class=\"hljs-regexp\">//</span>\n<span class=\"hljs-regexp\">//</span>   See https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/sanctuary-js/</span>sanctuary-def<span class=\"hljs-regexp\">/tree/</span>v0.<span class=\"hljs-number\">14.0</span><span class=\"hljs-comment\">#FiniteNumber for information about the sanctuary-def/FiniteNumber type.</span>\n</code></pre>\n<h3><a href=\"#compile-time-type-checking\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Compile time type checking</h3>\n<p>\n  <a href=\"http://www.typescriptlang.org/\">Typescript</a> can be of huge benefit to a functional style for\n  catching errors at compile time or in an ide.\n</p>\n<p>\n  This can't help you while really debugging an error from the runtime.\n  If you are starting to type functional code, it should be said that incorrectly\n  typed code can lead to introducing errors that only show while in\n  the runtime. So blindly trusting complex types can lead to a false\n  sense of security.\n</p>\n<p>\n  In some scenarios, I have found that strictly typing everything\n  religiously can be quite cumbersome with little return. For example,\n  think about strictly typing a large <a href=\"http://ramdajs.com/docs/#pipe\">pipe</a> or\n  <a href=\"http://ramdajs.com/docs/#compose\">compose</a> with <a href=\"https://www.typescriptlang.org/docs/handbook/generics.html\">Generics</a> from the\n  Ramda <a href=\"https://github.com/types/npm-ramda\">@types/ramda</a> definitions.\n</p>\n<p>For a reasonably large pipe, consider strict compliance with this interface:</p>\n<pre><code class=\"hljs language-ts\">pipe&#x3C;V0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(\n    fn0: <span class=\"hljs-function\">(<span class=\"hljs-params\">x0: V0</span>) =></span> T1,\n    fn1: <span class=\"hljs-function\">(<span class=\"hljs-params\">x: T1</span>) =></span> T2,\n    fn2: <span class=\"hljs-function\">(<span class=\"hljs-params\">x: T2</span>) =></span> T3,\n    fn3: <span class=\"hljs-function\">(<span class=\"hljs-params\">x: T3</span>) =></span> T4,\n    fn4: <span class=\"hljs-function\">(<span class=\"hljs-params\">x: T4</span>) =></span> T5,\n    fn5: <span class=\"hljs-function\">(<span class=\"hljs-params\">x: T5</span>) =></span> T6,\n    fn6: <span class=\"hljs-function\">(<span class=\"hljs-params\">x: T6</span>) =></span> T7,\n    fn7: <span class=\"hljs-function\">(<span class=\"hljs-params\">x: T7</span>) =></span> T8,\n    fn8: <span class=\"hljs-function\">(<span class=\"hljs-params\">x: T8</span>) =></span> T9): <span class=\"hljs-function\">(<span class=\"hljs-params\">x0: V0</span>) =></span> T9;\n</code></pre>\n<p>Another smaller example, without the line breaks:</p>\n<pre><code class=\"hljs language-ts\">compose&#x3C;V0, T1, T2, T3, T4, T5, T6><span class=\"hljs-function\">(<span class=\"hljs-params\">fn5: (<span class=\"hljs-params\">x: T5</span>) => T6, fn4: (<span class=\"hljs-params\">x: T4</span>) => T5, fn3: (<span class=\"hljs-params\">x: T3</span>) => T4, fn2: (<span class=\"hljs-params\">x: T2</span>) => T3, fn1: (<span class=\"hljs-params\">x: T1</span>) => T2, fn0: (<span class=\"hljs-params\">x: V0</span>) => T1</span>): (<span class=\"hljs-params\">x: V0</span>) =></span> T6\n</code></pre>\n<p>\n  I think this is quite prone to user error and frustration. Your Types most\n  probably have names longer than two characters, so you may need\n  text wrapping on. I found that it can take longer to write in the Generics\n  than it does to write the composition itself.\n</p>\n<p>\n  Rather than typing the entire compose, I'd suggest it is more\n  important to wrap it in a named function, strictly type all the input\n  and output and add a reasonable amount of test coverage.\n</p>\n<p>\n  Don't let this scare you from the <a href=\"https://github.com/types/npm-ramda\">@types/ramda</a> though. I am\n  probably cherry picking the worst case. It's actually mostly, wonderful to use\n  and can be invaluable when you need to refactor code.\n</p>\n<h3><a href=\"#final-thoughts\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Final thoughts</h3>\n<p>\n  While error stack traces may not always be the only, nor the most helpful\n  way to understand errors, they are still useful in development, qa\n  and production. Being ready to handle errors for Javascript running in\n  cross-platform and multi-vendor web browsers I think is a must. Consider\n  also other external factors like conflicting browser extensions,\n  local network topologies and connectivity, it is hard not to describe\n  this as a volatile environment.\n</p>\n<p>\n  With this in mind, an entire industry of tooling now exists to provide some\n  powerful ways to capture errors, user breadcrumbs and error stack traces as\n  they happen. If you aren't using anything, a great solution to checkout is\n  <a href=\"https://github.com/getsentry/sentry\">sentry</a> which is also BSD3 licenced.\n</p>\n<p>\n  A functional programming style is no silver bullet, especially when you use\n  it in browsers and Javascript. If you are writing a lot of functional code\n  in a large complex codebase. My recommendation is not to start out by using\n  an entirely <a href=\"https://en.wikipedia.org/wiki/Tacit_programming\">point-free</a> style. Instead make sure to couple\n  a healthy use of named functions on the main business logic and public apis.\n  Also look into typing those functions properly with <a href=\"http://www.typescriptlang.org/\">Typescript</a>\n  or <a href=\"https://flow.org/\">Flow</a> so that it is easier to maintain and refactor.\n</p>\n<p>\n  I couldn't find too much else written about this kind of thing.\n  So I encourage others to. Unless you suggest people invest in a monitor stand\n  that supports Portrait mode.\n  That way all of the Call Stack can fit into the view ;)\n</p>\n<p>\n  I'd like to credit a fantastic book on functional programming\n  <a href=\"https://mostly-adequate.gitbooks.io/mostly-adequate-guide/ch05.html#debugging\">mostly adequate guide</a>, the logging technique\n  is also mentioned in the debugging section.\n</p>\n",
  "meta": {
    "title": "Debugging Functional Javascript",
    "layout": "Post",
    "tagline": "Working through errors and stacktraces to debug functional style javascript",
    "tags": "fp, js, debugging"
  },
  "fileName": "debugging-fp-js.md"
}